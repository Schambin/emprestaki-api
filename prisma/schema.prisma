// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  LEITOR
  ADMINISTRADOR
}

enum BookStatus {
  AVAILABLE
  RENTED
}

enum ActionType {
  LOAN
  RETURN
  PAYMENT
  BOOK_CREATED
  BOOK_UPDATED
  BOOK_DELETED
  USER_REGISTERED
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(LEITOR)
  loans     Loan[]
  payments  Payment[]
  logs      Log[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([email])
}

model Book {
  id        Int        @id @default(autoincrement())
  title     String
  author    String
  category  String
  status    BookStatus @default(AVAILABLE)
  loans     Loan[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([title])
  @@index([author])
  @@index([category])
  @@index([status])
}

model Loan {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  bookId       Int
  book         Book      @relation(fields: [bookId], references: [id])
  checkoutDate DateTime
  dueDate      DateTime
  returnDate   DateTime?
  fineAmount   Float     @default(0)
  paid         Boolean   @default(false)
  payment      Payment?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([bookId])
  @@index([paid])
  @@index([dueDate])
}

model Payment {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  loanId      Int      @unique
  loan        Loan     @relation(fields: [loanId], references: [id])
  amount      Float
  paymentDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([loanId])
}

model Log {
  id        Int        @id @default(autoincrement())
  action    ActionType
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  details   String?
  createdAt DateTime   @default(now())

  @@index([action])
  @@index([userId])
  @@index([createdAt])
}
